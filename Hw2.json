{
	"info": {
		"_postman_id": "8888ce6d-cee1-469c-aadf-8faf22c138d2",
		"name": "Hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26177120"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"pm.sendRequest(\"http://162.55.220.72:5005\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"}); \r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос. \r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"var resp_name = jsonData.name;\r",
							"\r",
							"console.log(\"Resp_name = \", resp_name)\r",
							"\r",
							"pm.test(\"Resp_NAME_check\", function () {\r",
							"        pm.expect(resp_name).to.eql('Ekaterina');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var resp_age = jsonData.age;\r",
							"\r",
							"console.log(\"Resp_age = \", resp_age)\r",
							"\r",
							"pm.test(\"Resp_AGE_check\", function () {\r",
							"        pm.expect(resp_age).to.eql('26');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"console.log(\"Resp_salary = \", resp_salary)\r",
							"\r",
							"pm.test(\"Resp_SALARY_check\", function () {\r",
							"        pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req.name;\r",
							"\r",
							"console.log(\"Req_name = \", req_name)\r",
							"\r",
							"pm.test(\"Req_NAME_check\", function () {\r",
							"        pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = req.age;\r",
							"\r",
							"console.log(\"Req_age = \", req_age)\r",
							"\r",
							"pm.test(\"Req_AGE_check\", function () {\r",
							"        pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"Req_salary = \", req_salary)\r",
							"\r",
							"pm.test(\"Req_SALARY_check\", function () {\r",
							"        pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family;\r",
							"\r",
							"console.log(resp_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var req_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"var salary = req_salary;\r",
							"\r",
							"var req_salary = salary*4;\r",
							"\r",
							"console.log('Req_u_salary_1_5_year = ', req_u_salary_1_5_year)\r",
							"console.log('U_salary_1_5_year = ', req_salary)\r",
							"\r",
							"pm.test(\"Req_SALARY_1_5_check\", function () {\r",
							"        pm.expect(req_salary).to.eql(req_u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req.name;\r",
							"\r",
							"console.log(\"Req_name = \", req_name)\r",
							"\r",
							"pm.test(\"Req_NAME_check\", function () {\r",
							"        pm.expect(req_name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = req.age;\r",
							"\r",
							"console.log(\"Req_age = \", req_age)\r",
							"\r",
							"pm.test(\"Req_AGE_check\", function () {\r",
							"        pm.expect(req_age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"Req_salary = \", req_salary)\r",
							"\r",
							"pm.test(\"Req_SALARY_check\", function () {\r",
							"        pm.expect(req_salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family;\r",
							"\r",
							"console.log(resp_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"var resp_dog_name = jsonData.family.pets.dog.name;\r",
							"\r",
							"console.log(resp_dog_name)\r",
							"\r",
							"pm.test(\"Resp_DOGname_check\", function () {\r",
							"        pm.expect(resp_dog_name);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"var resp_dog_age = jsonData.family.pets.dog.age;\r",
							"\r",
							"console.log(resp_dog_age)\r",
							"\r",
							"pm.test(\"Resp_DOGage_check\", function () {\r",
							"        pm.expect(resp_dog_age);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"var resp_dog_name = jsonData.family.pets.dog.name;\r",
							"\r",
							"console.log(resp_dog_name)\r",
							"\r",
							"pm.test(\"Resp_DOGname_check\", function () {\r",
							"        pm.expect(resp_dog_name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"var resp_dog_age = jsonData.family.pets.dog.age;\r",
							"\r",
							"console.log(resp_dog_age)\r",
							"\r",
							"pm.test(\"Resp_DOGage_check\", function () {\r",
							"        pm.expect(resp_dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Ekaterina&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req.name;\r",
							"\r",
							"console.log(\"Req_name = \", req_name)\r",
							"\r",
							"pm.test(\"Req_NAME_check\", function () {\r",
							"        pm.expect(req_name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var req_age = +req.age;\r",
							"\r",
							"console.log(\"Req_age = \", req_age)\r",
							"\r",
							"pm.test(\"Req_AGE_check\", function () {\r",
							"        pm.expect(req_age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"Req_salary = \", req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"console.log(\"Resp_salary = \", resp_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var elem_0 = jsonData.salary[0];\r",
							"\r",
							"console.log(\"Elememt 0 =\", elem_0)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var elem_1 = jsonData.salary[1];\r",
							"\r",
							"console.log(\"Elememt 1 =\", elem_1)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var elem_2 = jsonData.salary[2];\r",
							"\r",
							"console.log(\"Elememt 2 =\", elem_2)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Req_SALARYel0_check\", function () {\r",
							"        pm.expect(elem_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var req_el1 = req_salary * 2;\r",
							"\r",
							"pm.test(\"Req_SALARYel1_check\", function () {\r",
							"        pm.expect(+elem_1).to.eql(req_el1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var req_el2 = req_salary * 3;\r",
							"\r",
							"pm.test(\"Req_SALARYel2_check\", function () {\r",
							"        pm.expect(+elem_2).to.eql(req_el2);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name')\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age')\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary')\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', req_name)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', req_age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', req_salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i of jsonData.salary) {\r",
							"        console.log(i)};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Ekaterina&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"var req_salary = pm.environment.get('salary');\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"var req_age = pm.environment.get('age');\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"var req_name = pm.environment.get('name');\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Param_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Param_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Param_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Param_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Param_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Param_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"        pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {\r",
							"        pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"        pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_name\", function () {\r",
							"        pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_u_age\", function () {\r",
							"        pm.expect(jsonData.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years\", function () {\r",
							"        pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var i in jsonData.person) {\r",
							"        console.log(i, jsonData.person[i])};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ekaterina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}